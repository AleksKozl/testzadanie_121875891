version: '3.8'

services:

  nginx:
    image: nginx:1.22.1
    ports:
      - "80:80"
    volumes:
      - ./compose/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./staticfiles:/app/staticfiles
      # - ./media:/app/mediafiles
    depends_on:
      - tz_wildberries_parser
    restart: always
    networks:
      - backend_network

  tz_wildberries_parser:
    image: tz_wildberries_parser:latest
    build:
      context: .
      dockerfile: ./compose/django/dockerfile
    env_file:
      - .env
    volumes:
      - .:/app
      - ./staticfiles:/app/staticfiles
      - ./mediafiles:/app/mediafiles
      - ./logs/django:/app/logs/django
    expose:
      - 8000
    depends_on:
      - redis_celery
      - postgres
    restart: unless-stopped
    networks:
      - backend_network

  postgres:
    image: postgres:15.2
    environment:
      POSTGRES_DB: ${DB_POSTGRESQL_NAME}
      POSTGRES_USER: ${DB_POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${DB_POSTGRESQL_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_POSTGRESQL_USER} -d ${DB_POSTGRESQL_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  redis_celery:
    image: redis:7.0.9
    volumes:
      - redis_celery_data:/var/lib/redis_celery/data
    environment:
      REDIS_CELERY_PASSWORD: ${REDIS_CELERY_PASSWORD}
    ports:
      - "6381:6379"
    command:
      - redis-server
      - --requirepass ${REDIS_CELERY_PASSWORD}
    restart: unless-stopped
    networks:
      - backend_network

  celery_worker:
    image: celery_worker:latest
    build:
      context: .
      dockerfile: ./compose/celery/dockerfile.celery
    volumes:
      - ./logs/celery_worker:/app/logs/celery_worker
    environment:
      REDIS_CELERY_HOST: ${REDIS_CELERY_HOST}
      REDIS_CELERY_PORT: ${REDIS_CELERY_PORT}
      REDIS_CELERY_PASSWORD: ${REDIS_CELERY_PASSWORD}
      DB_POSTGRESQL_NAME: ${DB_POSTGRESQL_NAME}
      DB_POSTGRESQL_USER: ${DB_POSTGRESQL_USER}
      DB_POSTGRESQL_PASSWORD: ${DB_POSTGRESQL_PASSWORD}
      DB_POSTGRESQL_HOST: ${DB_POSTGRESQL_HOST}
      DB_POSTGRESQL_PORT: ${DB_POSTGRESQL_PORT}
    depends_on:
      - redis_celery
    entrypoint: /app/compose/celery/start_celery_worker.sh
    restart: unless-stopped
    networks:
      - backend_network


volumes:
  postgres_data: {}
  redis_celery_data: {}


networks:
  frontend_network: {}
  backend_network:
    driver: bridge
